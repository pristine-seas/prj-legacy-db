---
title: "Deep sea cameras"
number-sections: false
date: today
format: 
  html:
    self-contained: true
    code-fold: true
    toc: true
    toc-location: right
---

```{r, message = F, warning = F, fig.width = 10, fig.height = 10, echo = F}
options(scipen = 999)

library(paletteer)
library(sf)
library(bigrquery)
library(gt)
library(tidyverse)

knitr::opts_chunk$set(eval = F, warning = F, message = F, include = F, echo = F)

PristineSeasR::set_ps_paths(email = "marine.data.science@ngs.org")

prj_path <- file.path(ps_science_path, "projects", "prj-legacy-db")

ps_data_path <- file.path(ps_science_path, "datasets/")

bigrquery::bq_auth(email = "marine.data.science@ngs.org")

bq_connection <- DBI::dbConnect(bigrquery::bigquery(), project = "pristine-seas")
```

# Expeditions 

```{r eval = TRUE, include = T}
legacy_dscm_meta <- readxl::read_excel(path = file.path(prj_path, "data/raw/Expedition, Camera, Deployments Database_20211208_PS_JSM_modified.xlsx")) |> 
  janitor::clean_names()

monthly_stamp <- lubridate::stamp(x = "2019-02", orders = "ym")

legacy_dscm_meta <- legacy_dscm_meta |> 
  mutate(date = lubridate::ym(start_yyyymm),
         date = monthly_stamp(date)) |> 
  select(ps_expedition_id, expedition_id, expedition,  date, expedition_vessel, lead_operator, contains("dod")) |> 
  unite(col = dscm_ids, contains("dod"), na.rm = T, sep = ";")

visdat::vis_dat(legacy_dscm_meta)
```

# Deployments

```{r eval = TRUE, include = T}
legacy_dscm_deployments <- readxl::read_xlsx(path = file.path(prj_path, 
                                                        "data/raw/Expedition, Camera, Deployments Database_20211208_PS_JSM_modified.xlsx"), 
                                              sheet = "Deployments",
                                             col_types = c(rep("guess", 9),
                                                           "text",
                                                           rep("guess", 14))
                                             ) |> 
  janitor::clean_names() |> 
  select(-notes)

legacy_dscm_deployments <- legacy_dscm_deployments |>
  mutate(max_depth_m = round(as.numeric(max_depth_m)),
         anchor_weight_kg = round(as.numeric(anchor_weight_kg)),
         bait_weight_kg = round(as.numeric(bait_weight_kg)),
         mission_start_time_utc = lubridate::ymd_hm(mission_start_time_utc_yyyymmddh_hmm),
         recovery_time_utc = lubridate::ymd_hm(recovery_time_utc_yyyymmddh_hmm),
         deployment_date = lubridate::as_date(mission_start_time_utc),
         recovery_date = lubridate::as_date(recovery_time_utc),
         location = coalesce(locality, island, island_group),
         mission_duration_hrs = hms::hms(hours = mission_duration_hrs)) |> 
  select(expedition,
         ps_expedition_id, 
         location,
         deployment_time = mission_start_time_utc,
         deployment_lon = deployment_longitude_ddd_ddddd,
         deployment_lat = deployment_latitude_ddd_ddddd, 
         recovery_time = recovery_time_utc,
         recovery_lon = recovery_longitude_ddd_ddddd,
         recovery_lat = recovery_latitude_ddd_ddddd,
         mission_duration = mission_duration_hrs,
         max_depth_m,
         bait_type,
         bait_kg = bait_weight_kg,
         ballast_type = anchor_material,
         ballast_kg = anchor_weight_kg,
         dscm_id = device_id,
         extech_deployment_id = deployment_id_do_not_edit, 
         extech_expedition_id = expedition_id,
         everything(),
         notes = deployment_remarks,
         -water_body, -mission_start_time_utc_yyyymmddh_hmm,-island, -island_group, -locality, -country,
         -recovery_time_utc_yyyymmddh_hmm) |> 
  arrange(desc(deployment_date)) 

legacy_dscm_deployments <- legacy_dscm_deployments |> 
  left_join(legacy_dscm_meta |> 
              select(expedition_id, lead_operator),
            by = c("extech_expedition_id"="expedition_id")) |> 
  mutate(location = coalesce(location, expedition)) |> 
  relocate(notes, .after = last_col())

legacy_dscm_deployments <- legacy_dscm_deployments |> 
  group_by(ps_expedition_id) |> 
  arrange(deployment_time) |> 
  mutate(method = "Deep sea camera",
         ps_site_id = paste(ps_expedition_id,"dscm",
                            formatC(row_number(), 
                                    flag = 0, width = 2),
                            sep = "_"),
         deployment_lat = if_else(expedition == "Antarctica" , deployment_lat*-1, deployment_lat),
         deployment_lon = if_else(expedition == "Antarctica" , deployment_lon*-1, deployment_lon)) |> 
  ungroup() |> 
  select(expedition, ps_expedition_id, method, ps_site_id, everything())

write_csv(legacy_dscm_deployments, 
          file.path(prj_path, "data/processed/clean_legacy_dscm_deployments.csv"))
```

```{r NAs, eval = TRUE, include = T}
visdat::vis_miss(legacy_dscm_deployments)
```

# Map

```{r map, eval = TRUE, include = T}
tmp <- legacy_dscm_deployments |> 
  filter(!is.na(deployment_lat)) |> 
  st_as_sf(coords = c("deployment_lon", "deployment_lat"), crs = 4326) |> 
  distinct(expedition, ps_expedition_id, ps_site_id, location, max_depth_m, mission_duration, geometry) 

mapview::mapview(tmp,
                 zcol = c(max_depth_m = "max_depth_m"), 
                 legend = TRUE,
                 map.types = c("Esri.WorldImagery"),
                 layer.name = "Deployment depth (m)",
                 popup = leafpop::popupTable(tmp,
                                      zcol = c("expedition",
                                               "ps_expedition_id",
                                               "ps_site_id",
                                               "location",
                                               "max_depth_m",
                                               "mission_duration")))
```

# Summary 

```{r eval = T, include = T}
totals <- legacy_dscm_deployments |> 
  summarize(n_expeditions = n_distinct(ps_expedition_id),
            n_deployments = n_distinct(ps_site_id),
            min_depth = min(max_depth_m, na.rm = T),
            mean_depth = mean(max_depth_m, na.rm = T),
            max_depth = max(max_depth_m, na.rm = T)) |> 
  mutate_if(is.numeric, round)

gt::gt(totals)
```
# Depths 

```{r eval = TRUE, include = T}
library(highcharter)

legacy_dscm_deployments |> 
  filter(!is.na(max_depth_m)) |> 
  pull(max_depth_m) |> 
  hchart(name = "Max depth (m)")
```

```{r eval = TRUE, include = T}
hcboxplot(
  x = legacy_dscm_deployments$max_depth_m,
  var = legacy_dscm_deployments$expedition,
  name = "Length",
  color = "#2980b9",
  outliers = TRUE) |> 
  hc_chart(type = "column") |> 
  hc_title(text = "Deployment depth by expedition") |> 
  hc_yAxis(title = list(text = "Height in metre")) |> 
  hc_add_series(data = legacy_dscm_deployments,
                type = "scatter",
                hcaes(x = "expedition", y = "legacy_dscm_deployments$max_depth_m", group = "expedition"),
                tooltip = list(pointFormat = "{point.location}<br>{point.ps_site_id}<br>{point.max_depth_m} meters")) |>  
  hc_plotOptions(scatter = list(jitter = list(x = .1, y = 0),
                                marker = list(radius = 3, opacity = 0.1, symbol = "circle",
                                              lineWidth = 0.5)))
```

# Harmonize with current data

```{r}
palau_dscm <- tbl(bq_connection, "metadata.PLW_2024_dscm") |> 
  filter(!is.na(ps_site_id)) |> 
  collect() |> 
  rename(mission_duration = mission_duration_hrs)

palau_dscm <- palau_dscm |> 
  rowwise() |> 
  mutate(sublocation = NA_character_,
         deployment_time = lubridate::ymd_hms(paste(deployment_date, deployment_time), tz = "Pacific/Palau"),
         recovery_time = lubridate::ymd_hms(paste(recovery_date, recovery_time), tz = "Pacific/Palau"))

dscm_deployments <- palau_dscm |> 
  bind_rows(legacy_dscm_deployments |> 
              select(-expedition)) |> 
  arrange(deployment_date) |> 
  filter(ps_expedition_id!="PLW_2024") |> 
  relocate(extech_deployment_id, .after = extech_expedition_id) |> 
  relocate(sublocation, .after = location) 

bq_table_create("pristine-seas.deep_sea_cameras.deployments", 
                fields = as_bq_fields(dscm_deployments))

bigrquery::bq_table_upload("pristine-seas.deep_sea_cameras.deployments", 
                           values = dscm_deployments, fields = dscm_deployments)
```
