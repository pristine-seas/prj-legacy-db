---
title: "Fish lookup table for the Pacific"
date: today
format: 
  html:
    theme: minty
    self-contained: true
    code-fold: true
    toc: true 
    toc-depth: 4
    toc-location: right
---

```{r setup, message = F, warning = F, fig.width = 10, fig.height = 10, echo = F}
options(scipen = 999)

library(PristineSeasR)
library(paletteer)
library(sf)
library(bigrquery)
library(gt)
library(tidyverse)
library(pointblank)

knitr::opts_chunk$set(eval = F, warning = F, message = F, include = F, echo = F)

set_ps_paths(email = "marine.data.science@ngs.org")

prj_path <- file.path(ps_science_path, "projects", "prj-legacy-db")

ps_data_path <- file.path(ps_science_path, "datasets/")

bigrquery::bq_auth(email = "marine.data.science@ngs.org")

project_id <- "pristine-seas"

bq_connection <- DBI::dbConnect(bigrquery::bigquery(), 
                                project = project_id)
```

This document will create a lookup table for fish species in the Pacific. The table will contain information on the species' taxonomy, length-weight parameters, trophic group, and other relevant information. The backbone for this table is the data compiled by the Sandin lab at the Scripps Institution of Oceanography.

# Read in the data

We will use the most up-to-date version of the fish survey data from the Sandin lab (June, 2024). This dataset contains information on the length-weight parameters and trophic groups for fish species in the Pacific.

```{r read_data}
fish_lut <- readxl::read_excel(file.path(prj_path,
                                         "data/raw/fish-surveys/Fish_LW_2024-06.xlsx")) |> 
  janitor::clean_names() |> 
  rename(taxon_code = new_name) |> 
  mutate(source = "SIO")

bad_codes <- c() 

bad_names <- c()

fish_lut <- fish_lut |> 
  filter(!taxon_code %in% bad_codes, 
         !taxon %in% bad_names) |> 
  mutate(taxon = if_else(str_detect(taxon, "species"), 
                         str_replace(taxon, "species", "sp."), taxon),
         taxon = if_else(str_detect(taxon, "spp"), 
                         str_replace(taxon, "spp", "spp."), taxon),
         species = if_else(str_detect(taxon, "spp.|sp."), NA_character_, species))

fish_lut |> 
  janitor::get_dupes(taxon)

fish_lut$taxon[fish_lut$taxon_code == "HI.GRAN"] <- "Himantura granulata"
```

## QA/QC Taxa

First, let's look at the unique taxon codes and scientific names in the dataset to ensure there aren't any duplicates. We'll also make sure there is naming consistency (e.g., always use sp. when taxa aren't resolved to species). Then, we'll clean up the taxa names to remove anything that would make it difficult to match the entry to a global database (e.g. c.f., sp., extra white space)

```{r qa_qc}
hybrids <- c("Acanthurus achilles x nigricans", 
             "Acanthurus olivaceus x nigricans", 
             "Paracirrhites arcatus x bicolor",
             "Paracirrhites arcatus x nisus",
             "Paracirrhites nisus x xanthus")

genus_edge_cases <- c("Cirrhilabrus sp.", "Pseudanthias sp.", "Ptereleotris sp.", "Paragobiodon sp.")

clean_fish_names <- bdc::bdc_clean_names(fish_lut$taxon) %>% 
  janitor::clean_names() %>% 
  select(taxon = scientific_name, 
         taxon_clean = names_clean) %>% 
  mutate(taxon_clean = coalesce(taxon_clean, 
                                taxadb::clean_names(taxon, lowercase = F))) %>% 
  distinct(taxon, taxon_clean)

fish_lut <- fish_lut |> 
  left_join(clean_fish_names) |> 
  select(taxon, taxon_code, taxon_clean, everything(), -species) |> 
  mutate(taxon_clean = if_else(taxon %in% hybrids, 
                               word(taxon, end = 1), 
                               taxon_clean)) # this is only for the hybrids
```

Next, we'll use the global name resolver to check for misspellings. After that we'll try to match to the WORMS database to see if any names have been updated. Then, we'll update the taxonomy information.

```{r gnr}
gnr <-  taxize::gnr_resolve(fish_lut$taxon_clean, 
                            canonical = F,
                            with_canonical_ranks = T,
                            data_source_ids = c(9)) %>% # Worms = 9
  filter(submitted_name != matched_name2) %>% 
  distinct(submitted_name, score, taxon_gnr = matched_name2) 

gnr <- gnr |> 
  filter(!str_detect(taxon_gnr, c("ovalauensis")))

fish_lut <- fish_lut |> 
  left_join(gnr,
            by = c("taxon_clean" = "submitted_name")) |> 
  mutate(taxon_gnr = coalesce(taxon_gnr, taxon_clean)) |> 
  select(taxon_code, taxon, taxon_gnr, everything()) 

fish_lut |> 
  filter(!str_ends(taxon_code, "\\.SP|.SPP"), !taxon %in% hybrids) |> 
  filter(taxon != taxon_gnr)
```

Now we'll query the WORMS database against those names

```{r worms_names}
worms_names <- fish_lut$taxon_gnr %>% 
  split(ceiling(seq_along(fish_lut$taxon_gnr)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() |> 
  filter(!is.na(scientificname)) |> 
  select(taxon_gnr = scientificname, status, taxon_valid_name = valid_name) |> 
  distinct()

duped_worms_names <- worms_names %>% 
  janitor::get_dupes(taxon_gnr)

deduped_worms_names <- duped_worms_names %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

worms_names <- worms_names %>% 
  group_by(taxon_gnr) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_worms_names)

fish_lut <- fish_lut |> 
  left_join(worms_names)  |> 
  mutate(status = if_else(status == "accepted" & 
                            taxon != taxon_valid_name & 
                            !str_ends(taxon_code, "\\.SP|.SPP") & 
                            !taxon %in% hybrids, 
                          "misspelled",
                          status)) |> 
  select(taxon_code, taxon, status, taxon_valid_name, common_family, consumer, trophic, trophic_detailed, 
         a_cm, b_cm, ltl_rat, source)
```

After cleaning up taxa names, how many species are we dealing with?

  - Number of unique codes: `r unique(fish_lut$taxon_code) %>% length()`
  - Number of unique taxa scientific names: `r unique(fish_lut$taxon_valid_name) %>% length()`
  - Number of unique taxa with updated scientific name: `r length(unique(fish_lut$taxon[!fish_lut$status %in% c("accepted", "misspelled")]))`
    - Number of unique taxa with misspellings: `r length(unique(fish_lut$taxon_valid_name[fish_lut$status == "misspelled"]))`
  - Number of unique taxa not resolved at species level: `r length(unique(fish_lut$taxon_valid_name[str_ends(fish_lut$taxon_code, "\\.SP|.SPP")]))`

What names have been updated?

```{r}
(updated_taxa <- fish_lut |> 
  select(taxon_code, taxon, status, taxon_valid_name) |> 
  filter(!str_ends(taxon_code, "\\.SP|.SPP"), 
         !taxon %in% hybrids,
         taxon != taxon_valid_name))
```

## Taxonomy

Now we will add additional taxonomic info from WORMS

```{r taxonomy}
taxonomy_worms <- fish_lut$taxon_valid_name %>% 
  split(ceiling(seq_along(fish_lut$taxon_valid_name)/20)) %>% 
  furrr::future_map_dfr(worrms::wm_records_names) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(scientificname)) %>% 
  mutate(rank = str_to_lower(rank),
         taxon_id = if_else(!is.na(valid_aphia_id),
                            paste0("WORMS:", valid_aphia_id),
                            NA_character_)) %>% 
  select(taxon_valid_name = scientificname, status, taxon_rank = rank, taxon_id, taxon_authority = valid_authority, kingdom, phylum, class, order, family, genus) %>% 
  distinct()

duped_taxonomy <- taxonomy_worms %>% 
  janitor::get_dupes(taxon_valid_name) 

deduped_taxonomy <- duped_taxonomy %>% 
  filter(status %in% c("accepted")) %>% 
  select(-dupe_count)

taxonomy_worms <- taxonomy_worms %>% 
  group_by(taxon_valid_name) %>% 
  filter(n() <= 1) %>% # remove duplicates
  bind_rows(deduped_taxonomy)  # add deduped

fish_lut <- fish_lut |> 
  left_join(taxonomy_worms |> 
              select(-status))

fish_lut$taxon_valid_name[fish_lut$taxon_code == "UP.GUTT"] <- "Upeneus guttatus"
fish_lut$status[fish_lut$taxon_code == "UP.GUTT"] <- "accepted"
fish_lut$taxon_rank[fish_lut$taxon_code == "UP.GUTT"] <- "species"
fish_lut$taxon_id[fish_lut$taxon_code == "UP.GUTT"] <- "WORMS:1013371"
fish_lut$taxon_authority[fish_lut$taxon_code == "UP.GUTT"] <- "(Day, 1868)"
fish_lut$kingdom[fish_lut$taxon_code == "UP.GUTT"] <- "Animalia"
fish_lut$phylum[fish_lut$taxon_code == "UP.GUTT"] <- "Chordata"
fish_lut$class[fish_lut$taxon_code == "UP.GUTT"] <- "Teleostei"
fish_lut$order[fish_lut$taxon_code == "UP.GUTT"] <- "Mulliformes"
fish_lut$family[fish_lut$taxon_code == "UP.GUTT"] <- "Mullidae"
fish_lut$genus[fish_lut$taxon_code == "UP.GUTT"] <- "Upeneus"

fish_lut |> 
  group_by(family) |> 
  summarise(n_taxa = n_distinct(taxon_valid_name)) |> 
  arrange(desc(n_taxa)) 

fish_lut |>
  filter(is.na(taxon_id), is.na(family))
```

## Trophic groups

Now, let's inspect that every taxa has assigned a trophic group.

```{r trophic_groups}
fish_lut |> 
  group_by(trophic) |> 
  summarize(n_taxa = n_distinct(taxon_valid_name))
```

```{r}
fish_lut <- fish_lut |> 
  mutate(trophic_detailed = str_to_upper(trophic_detailed)) 

fish_lut |> 
  group_by(trophic_detailed) |> 
  summarize(n_taxa = n_distinct(taxon_valid_name)) 
```

```{r}
fish_lut |> 
  filter(is.na(trophic))
```

## LW parameters

Now, let's inspect that every taxa has the parameters needed for the length-weight conversion. 

```{r lw_parameters}
# Here we replace all NAs Ltl ratios with 1

fish_lut <- fish_lut |> 
  replace_na(list(ltl_rat = 1))

fish_lut |> 
  filter(is.na(a_cm) | is.na(b_cm) | is.na(ltl_rat))
```

## Max length

Lastly, ensure each taxa has reported max length in order to do quality control checks on the observations.

```{r lmax}
# we will fill in the missing value with information from fishbase

fishbase_params <- fish_lut %>% 
  pull(taxon_valid_name) %>% 
  split(ceiling(seq_along(fish_lut$taxon_valid_name)/20)) %>% 
  furrr::future_map_dfr(rfishbase::estimate) %>% 
  janitor::clean_names() %>% 
  select(fb_taxa_code = spec_code, 
         taxon_valid_name = species, 
         fb_lmax = max_length_tl, 
         fb_troph = troph) %>% 
  distinct() |> 
  left_join(fish_lut |> 
              distinct(taxon_valid_name, taxon_code)) 

not_in_fb <- fish_lut |> 
  anti_join(fishbase_params) |> 
  filter(!str_detect(taxon, "sp.|spp."),
         ! taxon %in% hybrids) 

not_in_fb_params <- furrr::future_map_dfr(not_in_fb$taxon,
                                   rfishbase::estimate) %>% 
  janitor::clean_names() %>% 
  select(fb_taxa_code = spec_code, 
         taxon = species, 
         fb_lmax = max_length_tl, 
         fb_troph = troph) %>% 
  distinct() |> 
  left_join(fish_lut |> 
              distinct(taxon, taxon_code))

fb_params <- bind_rows(not_in_fb_params, fishbase_params) |> 
  select(-taxon, -taxon_valid_name)

fish_lut <- fish_lut |> 
  left_join(fb_params) 

fish_lut |> 
  filter(is.na(fb_lmax), 
         !str_detect(taxon, "sp."),
         ! taxon %in% hybrids)
```

```{r manual_lmax}
fish_lut$fb_lmax[fish_lut$taxon_code == "PS.BART"] <- 9
fish_lut$fb_troph[fish_lut$taxon_code == "PS.BART"] <- 3.4
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PS.BART"] <- 12719
  
fish_lut$fb_lmax[fish_lut$taxon_code == "PS.BICO"] <- 13
fish_lut$fb_troph[fish_lut$taxon_code == "PS.BICO"] <- 3.4
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PS.BICO"] <- 7874
  
fish_lut$fb_lmax[fish_lut$taxon_code == "PS.EVANS"] <- 12
fish_lut$fb_troph[fish_lut$taxon_code == "PS.EVANS"] <- 3.4
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PS.EVANS"] <- 7799

fish_lut$fb_lmax[fish_lut$taxon_code == "PS.PASC"] <- 20
fish_lut$fb_troph[fish_lut$taxon_code == "PS.PASC"] <- 3.3
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PS.PASC"] <- 6934

fish_lut$fb_lmax[fish_lut$taxon_code == "PS.TUKA"] <- 12
fish_lut$fb_troph[fish_lut$taxon_code == "PS.TUKA"] <- 3.6
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PS.TUKA"] <- 6502

fish_lut$fb_lmax[fish_lut$taxon_code == "PT.TURD"] <- 47
fish_lut$fb_troph[fish_lut$taxon_code == "PT.TURD"] <- 3.9
fish_lut$fb_taxa_code[fish_lut$taxon_code == "PT.TURD"] <- 51659

fish_lut |> 
  filter(is.na(fb_lmax),
         !str_detect(taxon, "sp."),
         ! taxon %in% hybrids) 
```


```{r lmax_gaps}
# The remaining data gaps in lmax_cm are for genus taxa codes. We'll impute these.

impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))

fish_lut <- fish_lut %>% 
  group_by(genus) %>% 
  mutate_at(vars(fb_troph, fb_lmax), 
            .funs =  impute.mean) %>% 
  mutate_all(~ifelse(is.nan(.), NA, .)) |> 
  ungroup()

fish_lut |> 
  filter(is.na(fb_lmax)) 

fish_lut <- fish_lut %>% 
  group_by(family) %>% 
  mutate_at(vars(fb_troph, fb_lmax), 
            .funs =  impute.mean) %>% 
  mutate_all(~ifelse(is.nan(.), NA, .)) |> 
  ungroup()
```

```{r}
fish_lut |> naniar::vis_miss()
```

# Upload to BQ

Lastly, make sure all the fields are correctly named and the types are right. Also put back the taxon names for the hybrid species. 

```{r harmonize_names}
fish_lut <- fish_lut |> 
  select(taxon_code, original_scientific_name = taxon, status, accepted_scientific_name = taxon_valid_name,
         taxon_rank, genus, family, common_family, order, class, phylum, kingdom, 
         consumer, trophic_group = trophic, detailed_trophic_group = trophic_detailed, 
         trophic_level = fb_troph, lmax = fb_lmax, a = a_cm, b = b_cm, ltl_ratio = ltl_rat, 
         lw_source = source, worms_id = taxon_id, fishbase_id = fb_taxa_code) |> 
  mutate(fishbase_id = as.integer(fishbase_id),
         lmax_source = "Fishbase") 

fish_lut$accepted_scientific_name[fish_lut$ original_scientific_name %in% hybrids] <- 
  fish_lut$original_scientific_name[fish_lut$original_scientific_name %in% hybrids]

fish_lut$taxon_rank[fish_lut$original_scientific_name %in% hybrids] <- "hybrid"
```

One last step before uploading to BQ is to create the valid taxon codes and make a full join to get all the codes for a given accepted scientific name. 

```{r}
diff_taxa_codes <- fish_lut |> 
  mutate(genus = word(accepted_scientific_name, 1),
         species = word(accepted_scientific_name, 2),
         taxon_valid_code = case_when(original_scientific_name %in% hybrids | original_scientific_name %in% genus_edge_cases ~ taxon_code,
                                      taxon_rank != "species" ~ str_to_upper(paste(str_sub(genus, 1, 4),
                                                                                   "SP", sep = ".")),
                                      TRUE ~ str_to_upper(paste(str_sub(genus, 1, 2), 
                                                                str_sub(species, 1, 4),
                                                                sep = ".")))) |> 
  filter(taxon_valid_code != taxon_code) |> 
  select(taxon_code, taxon_valid_code, original_scientific_name, accepted_scientific_name, status) 

# The following are taxa whose names are correct but the code is not what it should be. This is because some other taxa have the same code and an exception was made.

diff_taxa_codes |> 
  filter(original_scientific_name == accepted_scientific_name)
```

```{r}
# the following are updated codes with the accepted scientific name when it has changed

updated_codes <- diff_taxa_codes |> 
  filter(original_scientific_name != accepted_scientific_name) |> 
  filter(!taxon_valid_code %in% fish_lut$taxon_code) |> # Here exclude code that already exist in the table. we'll see them soon.
  select(taxon_code = taxon_valid_code, accepted_scientific_name) |> 
  mutate(original_scientific_name = accepted_scientific_name,
         status = "accepted")

updated_codes <- updated_codes |> 
  left_join(fish_lut |> 
              select(-taxon_code, -original_scientific_name, -status), 
            by = "accepted_scientific_name") 

# now we bind them together

fish_lut <- fish_lut |>
  bind_rows(updated_codes)

# now we'll check for duplicates

fish_lut |> 
    janitor::get_dupes(taxon_code)

fish_lut |> 
  distinct(accepted_scientific_name, trophic_group, detailed_trophic_group, common_family) |>
  janitor::get_dupes(accepted_scientific_name)
```

```{r}
fish_lut$trophic_group[fish_lut$accepted_scientific_name == "Amblyglyphidodon curacao"] <- "Planktivore"
  
fish_lut$trophic_group[fish_lut$accepted_scientific_name == "Fusigobius duospilus"] <- "Lower-carnivore"
fish_lut$detailed_trophic_group[fish_lut$accepted_scientific_name == "Fusigobius duospilus"] <- "BI"

fish_lut$trophic_group[fish_lut$accepted_scientific_name == "Fusigobius neophytus"] <- "Lower-carnivore"
fish_lut$detailed_trophic_group[fish_lut$accepted_scientific_name == "Fusigobius neophytus"] <-  "BI"
  
fish_lut$trophic_group[fish_lut$accepted_scientific_name == "Ostorhinchus angustatus"] <- "Lower-carnivore"
fish_lut$detailed_trophic_group[fish_lut$accepted_scientific_name == "Ostorhinchus angustatus"] <- "BI"
```

```{r}
fish_lut |> 
  filter(is.na(fishbase_id))
```

```{r}
tbl_colnames <- tbl(bq_connection, "fish_surveys.taxa_lookup_pacific") |> 
  filter(!is.na(taxon_code)) |> 
  dplyr::collect() |> 
  colnames()

fish_lut |> 
  select(all_of(tbl_colnames))
```

Now, upload the table to BigQuery.

```{r upload}
bq_table_upload(
  x = bq_table(project_id, "fish_surveys", "taxa_lookup_pacific"),
  values = fish_lut,
  write_disposition = "WRITE_TRUNCATE",
)

fish_lut |> 
  write_csv(file.path(prj_path, "data/processed/fish_lut_pacific.csv"))
```
